#!/usr/bin/env python3
#
# mcUI --- minecraft based 3D UI for *nix
#
# copyright (c) 2019 Cj-bc a.k.a Cj.bc_sd
#
# (@) version: 0.0.2
# (@) usage:
# (@)   run this script while Minecraft is running.


import mcpi.minecraft as minecraft
import mcpi.block as block
# import mcpi.entity as entity
from mcpi.vec3 import Vec3
import os

# configs(should be in config.py) {{{
mergin = Vec3(5, 0, 0) # mergin from player position to center of objects' spawing place
padding = Vec3(3, 0, 0) # padding between each objects
line_vec = Vec3(0, 3, 0) # vector to define which axis should objects follow
MAX_OBJECT_PER_LINE = 6 # how much objects could be in one line?
# }}}


# functions {{{
# get_schemas() {{{2
def get_schemas():
    """get list of blocks for each filetype

        Args:
            no args
        Return:
            schema (dict): key is "filetype", value is "block"
    """
    # TODO: remove this hardcoded data scheme
    schema = {"file": block.WOOL,
              "dir": block.IRON_BLOCK,
              "unknown": block.DIRT}
    return schema
# }}}


# ls(path) {{{2
def ls(path):
    """get current directory's entries and return list

       Args:
            path (str): POSIX path to serch files
       Return:
            files (list of dict): list of "path" entries.
            [ {"type": <file, dir>,
               "name": <file_name>},
               ...
            ]
    """
    ret = []
    with os.scandir(path) as it:
        for f in it:
            # TODO: remove this hardcoded data scheme
            if f.is_file():
                ret += [{"type": "file", "name": f.name}]
            elif f.is_dir():
                ret += [{"type": "dir", "name": f.name}]
            else:
                ret += [{"type": "unknown", "name": f.name}]

    return ret
# }}}


# write_files(start_pos, files) {{{2
def write_files(start_pos, files):
    """write "files" file entries to minecraft world
        Number of objects lay in one line is defined as MAX_OBJECT_PER_LINE

        Args:
            start_pos (vec3.Vec3): vec3 object which points the first position to generate
            files (list of dict): generated by ls(); list of 'path's entries
        Return:
            no return
    """
    schemas = get_schemas()

    # Divide into few lists that have exactlly the same amount of MAX_OBJECT_PER_LINE object.
    lines = [files[i:i+MAX_OBJECT_PER_LINE]
            for i in range(0,len(files), MAX_OBJECT_PER_LINE)]
    for index_line, a_line in enumerate(lines):
        for index_row, obj in enumerate(a_line):
            # TODO: should i make function?
            # TODO: I'm not sure whether this code works
            mc.setBlock(start_pos.x + index_row * padding.x + index_line * line_vec.x, start_pos.y + index_row * padding.y + index_line * line_vec.y,
                        start_pos.z + index_row * padding.z + index_line * line_vec.z, schemas[obj["type"]])

        counter += 1
# }}}
# }}}


mc = minecraft.Minecraft()
pwd = os.getcwd()

Spawn_object_criteria = mc.player.getPos() + mergin

mc.postToChat(f'pwd: {pwd}')

write_files(Spawn_object_criteria, ls(pwd))
